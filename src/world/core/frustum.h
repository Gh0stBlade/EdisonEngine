#pragma once

#include <cstdint>
#include <memory>
#include <vector>

#include "util/vmath.h"

namespace world
{
class Camera;
struct Portal;

namespace core
{
struct OrientedBoundingBox;
struct Polygon;

struct Frustum
{
    std::vector<util::Plane> planes; //!< clip planes
    std::vector<btVector3> vertices; //!< frustum vertices
    util::Plane norm;                //!< main frustum clip plane (inv. plane of parent portal)

    uint16_t parents_count = 0;
    const Frustum* parent = nullptr; //!< by who frustum was generated; parent == NULL is equal generated by camera

    bool hasParent(const Frustum& parent) const;
    bool isPolyVisible(const Polygon &p, const Camera& cam) const;
    bool isAABBVisible(const btVector3 &bbmin, const btVector3 &bbmax, const Camera& cam) const;
    bool isOBBVisible(const OrientedBoundingBox &obb, const Camera& cam) const;

    //! The main function for working with portals.
    static Frustum* portalFrustumIntersect(const Portal &portal, const Frustum& emitter, const Camera &cam);

    void prepareSplit(const Portal &p);
    void genClipPlanes(const Camera &cam);
    bool splitByPlane(const util::Plane &splitPlane);
};

} // namespace core
} // namespace world
